#-----------------------------------------------------
# this .ini file is loaded by all web servers -
#  a property that is defined in their server.ini
# will override one defined here.
#-----------------------------------------------------

#
# PORTS
# For the PORT and SSLPORT entry, specify a comma-delimited set of ports to listen on for
# normal http (PORT) and ssl/https (SSLPORT).  The server will attempt to listen on as
# many of the ports in your list as it can.  If it can not listen on any, it will give up
# and die.
#
#PORT=80,8080
#SSLPORT=443
#BIND=127.0.0.1

#
# DEBUGGING
# Set DEBUGFLAG to OFF to turn off any debugging.
# Set DEBUGFLAG to ON to turn on debugging to standard out
# Set DEBUGFLAG to FILE to turn on debugging only to the miniweb.log file
# Set DEBUGFLAG to BOTH to turn on debugging both to standard out and the miniweb.log file
#
DEBUGFLAG=OFF

#
# DEFAULT PAGE
# When a browser requests a directory name, what page from that directory should be served?
# You can specify it here!
#
DEFAULTPAGE=index.cmvp

#
# SSL CONFIGURATION
# MiniWebServer supports SSLv3 via a java keystore file (SSLKEYSTOREPATH), but you can 
# specify any key file format that java supports, so long as you also specify its type
# (SSLKEYSTORETYPE).  If the keystore/file has a password, specify it also (SSLKEYSTOREPASSWORD).
# If any of this stuff is invalid, the web server will not attempt to listen on your SSL ports.
#SSLKEYSTOREPATH=keys/keystore.jks
#SSLKEYSTOREPASSWORD=passphrase
#SSLKEYSTORETYPE=JKS
#SSLKEYMANAGERENCODING=SunX509

#
# FILE CACHING AND HANDLING
# The data for your web site can be cached in memory for better performance.  
# To tune this feature, you can specify the amount of time a cache entry lives
# in memory (FILECACHEEXPIREMS), how much TOTAL file data will be stored
# in the cache before it starts forcing entries out of the cache to make more
# room (FILECACHEMAXBYTES), and the maximum size of any one file stored in the
# cache (FILECACHEMAXFILEBYTES).
# The maximum size of any file that can be compressed is FILECOMPMAXBYTES.
# To turn off caching, set FILECACHEEXPIREMS and/or FILECACHEMAXBYTES to 0
# To allow caching of files of any size, set FILECACHEMAXFILEBYTES to 0
FILECACHEEXPIREMS=300000
FILECACHEMAXBYTES=65535
FILECACHEMAXFILEBYTES=8192
FILECOMPMAXBYTES=16485760

#
# REQUEST LIMITS
# This is some fine tuning regarding constraints on http requests.  You can
# specify the maximum size of any request body (REQUESTMAXBODYBYTES), the
# number of milliseconds a connection can sit idle between requests (REQUESTMAXIDLEMS),
# The maximum size of any one line of request data, such individual headers, url length,
# etc (REQUESTLINEBUFBYTES), the longest amount of time a connection can hang around
# sending requests to the web server and receiving data (REQUESTMAXALIVESECS), and the
# maximum number of requests that can be made on a single connection (REQUESTMAXPERCONN).  
REQUESTMAXBODYBYTES=2097152
#REQUESTMAXIDLEMS=30000
REQUESTLINEBUFBYTES=65535
#REQUESTMAXALIVESECS=15
REQUESTMAXPERCONN=20
#
# FORWARDING LISTS
# This is where you specify how requested hosts, ports, or contexts will be forwarded 
# to other web servers and ports and contexts. The way it works is that you specify 
# the word FORWARD followed by a forward slash character / and the optional host name 
# and optional port and the context (or just /), and then set that equal to 
# the host name of the remote web server, followed by a colon and the remote port number.
# You can specify as many mappings as you like .. miniwebserver will be pretty smart about
# which is the proper one to use for any particular url.
# Remember to escape your colons and backslashes (if you use them)!!
# Some examples:
#FORWARD/mydomain.net\:80/contextname=www.google.com\:80
#FORWARD/localhost\:8080/zimmers=www.zimmers.net\:80
#FORWARD/localhost\:8080/zhome=www.zimmers.net/home
#FORWARD/*\:8080/zcommie=www.zimmers.net\:80/commie
#FORWARD/gallery.localhost\:80/=www.zimmers.net\:80/cbmpics
#FORWARD/texas.localhost\:*/=www.zimmers.net/texas

#
# THREAD POOL TWEEKING
# Now for the really geeky stuff.  The web server will try to process as many requests at
# the same time as it can by spawning threads when it needs to.  You can tweek this process
# right here.  You can specify the minimum number of threads to keep hanging around waiting
# to process requests (CORETHREADPOOLSIZE), as well as the absolute maximum number (MAXTHREADS).
# You can also specify the amount of time a thread goes unused before it is shut down 
# (MAXTHREADIDLEMILLIS), the maximum number of tasks that can be queued up waiting for thread
# time (MAXTHREADQUEUESIZE), and the absolute maximum amount of time a thread is allowed to
# work on any one task (MAXTHREADTIMEOUTSECS).
CORETHREADPOOLSIZE=1
MAXTHREADS=10
MAXTHREADIDLEMILLIS=60000
MAXTHREADQUEUESIZE=500
#MAXTHREADTIMEOUTSECS=30

#
# DUPPOLICY
# How to deal with url parameters or multi-part fields that have the same names.
# For example: http://localhost?MYFIELD=bob&MYFIELD=joe&MYFIELD=tom
# Set DUPPOLICY to OVERWRITE to end up only one field where the last value wins.
# Set DUPPOLICY to ENUMERATE to append a number; e.g. MYFIELD=bob MYFIELD1=joe MYFIELD2=tom
#
DUPPOLICY=ENUMERATE

# 
# SIMPLE SERVLETS
# For you Java programmers, there is an interface available at 
# com.planet_ink.miniweb.interfaces.SimpleServlet for creating simple
# servlet classes.  There is also a SimpleServletRequest and SimpleServletResponse
# interface for doing your input and output.  When you create such a servlet, you
# can map it to a top-level url context by using the word "SERVLET" followed by
# a slash, followed by the root url context, and then setting that equal to the
# java class name where your SimpleServlet can be found.  Have as many as you like!
#
# Check out the example servlets in com/planet_ink/miniweb/servlets/*.java
SERVLET/stats=com.planet_ink.miniweb.servlets.ServletStatsServlet
SERVLET/info=com.planet_ink.miniweb.servlets.ServerInfoServlet
SERVLET/images/mxp/PlayerPortrait=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
SERVLET/AreaXML=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
SERVLET/FileData=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
SERVLET/ImageVerificationImage=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
SERVLET/pub/SipletInterface=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
SERVLET/SipletInterface=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer

# 
# MIME CONVERTERS
# Also for the Java programmers, there is an interface available at 
# com.planet_ink.miniweb.interfaces.HTTPOutputConverter for creating classes
# that transform data from a specific mime type by processing it. Since it only
# supports the mime types hard coded into com/planet_ink/miniweb/http/MIMEType.java.
# this is of limited usefulness -- still, you can do cool things make make custom
# http page converters! When you create such a converter, you specify it here by
# mapping the class to a mime type name by using the word "MIMECONVERT" followed by
# a period, followed by the mime type name, and then setting that equal to the
# java class name where your HTTPOutputConverter can be found.  Have as many as you like!
# Of course, using a mime converter will invalidate any eTag processing, since the
# whole point is to change the contents of pages from disk. :)
MIMECONVERT.mwhtml=com.planet_ink.miniweb.converters.MWHTMLConverter
MIMECONVERT.cmvp=com.planet_ink.coffee_mud.Libraries.WebMacroCreamer
